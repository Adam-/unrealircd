#line 0 "_MODULE__autogenerated.cc"
#include <list>

class _MODULE__Module
{
        public:
	static const char *getVersion();
	static const char *getCopyright();
	static const char *getName()
	{
		return "_MODULE_";
	}

        typedef bool (*onInit_hooker)();

        static void onInit()
        {
                std::list<onInit_hooker>::iterator it = onInit_hookers().begin();

                while (it != onInit_hookers().end())
                {
                        if ((*(*it))())
                        {
                                it++;
                        }
                        else break;
                }
        }
        static std::list<onInit_hooker>& onInit_hookers()
        {
                static std::list<onInit_hooker> hookers;
                return hookers;
        }
        static void onInit_registerHooker(onInit_hooker hooker)
        {
                onInit_hookers().push_front(hooker);
        }
        static void onInit_deregisterHooker(onInit_hooker hooker)
        {
                onInit_hookers().remove(hooker);
        }

        typedef bool (*onFini_hooker)();

        static void onFini()
        {
                std::list<onFini_hooker>::iterator it = onFini_hookers().begin();

                while (it != onFini_hookers().end())
                {
                        if ((*(*it))())
                        {
                                it++;
                        }
                        else break;
                }
        }
        static std::list<onFini_hooker>& onFini_hookers()
        {
                static std::list<onFini_hooker> hookers;
                return hookers;
        }
        static void onFini_registerHooker(onFini_hooker hooker)
        {
                onFini_hookers().push_front(hooker);
        }
        static void onFini_deregisterHooker(onFini_hooker hooker)
        {
                onFini_hookers().remove(hooker);
        }

        typedef bool (*onReload_hooker)();

        static void onReload()
        {
                std::list<onReload_hooker>::iterator it = onReload_hookers().begin();

                while (it != onReload_hookers().end())
                {
                        if ((*(*it))())
                        {
                                it++;
                        }
                        else break;
                }
        }
        static std::list<onReload_hooker>& onReload_hookers()
        {
                static std::list<onReload_hooker> hookers;
                return hookers;
        }
        static void onReload_registerHooker(onReload_hooker hooker)
        {
                onReload_hookers().push_front(hooker);
        }
        static void onReload_deregisterHooker(onReload_hooker hooker)
        {
                onReload_hookers().remove(hooker);
        }

}; 

